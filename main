# -*- coding: utf-8 -*-
"""
Created on Tue Apr 28 18:51:48 2020

@author: HP
"""


import sys

from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import QMainWindow, QWidget, QAction, QApplication, QDialog
from PyQt5.QtWidgets import  QTableWidget,QTableWidgetItem,QVBoxLayout
from PyQt5.uic import loadUi


# from PyQt5.QtGui import QIcon

## import for Serial Comm
import serial
import time
from serial.tools import list_ports

# ## import panbdas for excel data import
import pandas as pd
import datetime

## for pyinstaller
import pkg_resources.py2_warn





class GUI(QDialog):
    def __init__(self):
        super(GUI, self).__init__()
               
        ## defining some variables
        self.error_count = 0
        self.error_index = []

        
        ## load the ui file 
        loadUi('parameter_GUI.ui', self)
        
        ## define the action of the ui components
        self.button_setup.clicked.connect(self.f_setup)
        
        self.button_check.clicked.connect(self.f_check)
        self.button_load.clicked.connect(self.f_load)
        self.button_verify.clicked.connect(self.f_verify)
        
        self.button_send.clicked.connect(self.f_send)
        self.button_resend.clicked.connect(self.f_resend)
        
        
        
        # #load default parameters
        # file = open("default_param.txt","r")
        # default_param = file.read()
        # print(default_param)
        

    
        
## Functions
##============================       
## function for "Setup" Button
    def f_setup(self):
        
        active_comPort = self.comboBox.currentText()
        
        self.ser = serial.Serial()
        self.ser.baudrate = 9600
        self.ser.port = active_comPort
        self.ser.parity= serial.PARITY_NONE 
        self.ser.stopbits=serial.STOPBITS_ONE 
        self.ser.timeout=1
        print('done setting '+active_comPort)
        
        if self.ser.is_open is False:
            
            try:
                self.ser.open()
                self.textBrowser.setText(active_comPort + " opened")
                self.button_send.setEnabled(True)
                print(active_comPort+'just opened')
                
                # self.ser = serial.Serial(active_comPort,
                #         baudrate=9600, 
                #         parity= serial.PARITY_NONE, 
                #         stopbits=serial.STOPBITS_ONE, 
                #         timeout=1);   
            except PermissionError:
                self.textBrowser.setText("Permission Error")
                self.textBrowser.append("Try reconnect the USB")
                pass
            
            except:
                self.textBrowser.setText("Error, please reconnect cable and try again")
                pass
            
        else:
            print(active_comPort+'already opened') 
            self.textBrowser.setText(active_comPort + " already opened")
            self.button_send.setEnabled(True)
               
                    
        
        loop = 1;
        i = 1;
        while (loop == 1):
            ## send null byte until the Serial return 4 bytes values
            msg = b'\x00'       
            x = self.ser.write(msg) 
            i = i+1
            
            COM_read = self.ser.read(4)
            print(COM_read)
            
                       
            if len(COM_read) != 4:  #loop as long as the FPGA didnt reply with 4 bytes
                if i<5:
                    loop = 1;
                else:               # if i>=5, the FPGA is likely not programmed
                    loop = 0;
                    self.textBrowser.append('FPGA not ready')
                    print('not ready')
                                    
            else:
                    loop = 0;
                    self.textBrowser.append('Ready')
                    print('ready')
                    
        
##============================      
## function for "Check" Button
    def f_check(self):
        
        # check for available COM ports
        # and list in the ComoBox
        comPorts = serial.tools.list_ports.comports()
        nos_comPorts = len(comPorts)
        
        if nos_comPorts == 0:
            
            self.textBrowser.append("No COM Port Avaialble")
                                    
        else:
            
            self.button_setup.setEnabled(True)
            
            for i in range(nos_comPorts):
                name_comPorts = comPorts[i].device
                self.comboBox.addItem(name_comPorts)
            
              
        

##============================        
## function for "Load" Button        
    def f_load(self):
        now = datetime.datetime.now()

        self.textBrowser.append(now.strftime("%Y-%m-%d %H:%M:%S"))
        self.textBrowser.append("\n-Parameters loaded from excel")
        
        excel_data = pd.read_excel('parameter_list.xlsx', sheet_name='parameters')

        add_value = excel_data['ADDR'];
        data_value = excel_data['DATA'];


        for i in range(32):
            excel_parameter = add_value[i+2] + data_value[i+2]
            print(excel_parameter)
            self.tableWidget.setItem( i, 0, QTableWidgetItem(excel_parameter))
        
        

    
    
##============================    
## function for "Send" Button    
    def f_send(self):
        
        self.textBrowser.append('\n-Sending parameters...')
        self.error_count = 0
        self.error_index = []
        
        # update parameters using the "send" mode, i.e. update all 32 parameters
        self.update_parameter('send')

##============================    
## function for "Resend" Button    
    def f_resend(self):   
        
        self.textBrowser.append('\n-Resending parameters...')
        
        # update parameters using the "resend" mode, 
        # i.e. only update parameters with errors
        self.update_parameter('resend')
         
##============================        
## function for "Verify" Button                
    def f_verify(self):
           
        
        msg = b'\x00'  
       
        for i in range(4):
            self.ser.write(msg)
            time.sleep(0.1)
        
        print('sent: 0000')
        
        COM_read = self.ser.read(4)
        
        print('read:'+str(COM_read[0])+str(COM_read[1])+str(COM_read[2])+str(COM_read[3]))
        
        
        # check if returned value is 0x0000 0000
        if (COM_read[0]==0) & (COM_read[1]==0) & (COM_read[2]==0) & (COM_read[3]==0):
            self.textBrowser.append('\n-Parameters Verified!')
            # show time of complete   
            now = datetime.datetime.now()
            self.textBrowser.append('***COMPLETED on ')
            self.textBrowser.append(now.strftime("%Y-%m-%d %H:%M:%S"))
            
        else:
            self.textBrowser.append('-Error, please reverify')
        
                    
##============================        
## function for updating parameters
    def update_parameter(self, mode):
        
        print('updating parameters ... ...')
        self.button_verify.setEnabled(False)         
        temp_error_count = 0
        temp_error_index = []
        
        if mode == 'send':
            count = 32
            index = range(1,33)
            
        else:
            count = self.error_count
            index = self.error_index
            
            
        print('update count:')
        print(count)
        print('update index:')
        print(index)    
        
        
        for j in range(count):
            
            i = index[j]-1
            print('Sending parameter '+str(i))
            string = self.tableWidget.item(i, 0).text()
               
            print(i+1,':',string)
            
            # break data into 4 bytes           
            num1 = int(string[0:2],16)
            num2 = int(string[2:4],16)
            num3 = int(string[4:6],16)
            num4 = int(string[6:8],16)
            
            hex_data1 = num1.to_bytes(1,'big')
            hex_data2 = num2.to_bytes(1,'big')
            hex_data3 = num3.to_bytes(1,'big')
            hex_data4 = num4.to_bytes(1,'big')
            
            # send data one byte at a time
            # a small delay is needed to ensure signal sent correctly
            msg = hex_data1
            x = self.ser.write(msg)
            time.sleep(0.1)
            
            msg = hex_data2
            x = self.ser.write(msg)
            time.sleep(0.1)
            
            msg = hex_data3            
            x = self.ser.write(msg)
            time.sleep(0.1)
            
            msg = hex_data4
            x = self.ser.write(msg)
            time.sleep(0.1)
            
            COM_read = self.ser.read(4)
            # displaying sent and read data (in int) for checking
            print('sent:'+str(num1)+str(num2)+str(num3)+str(num4))
            print('read:'+str(COM_read[0])+str(COM_read[1])+str(COM_read[2])+str(COM_read[3]))
            
            # convert read data into string for updating the tableWidget
            echo_string = "{:0>2x}".format(COM_read[0])+ "{:0>2x}".format(COM_read[1])+\
                          "{:0>2x}".format(COM_read[2])+"{:0>2x}".format(COM_read[3])
            
            self.tableWidget.setItem( i, 1, QTableWidgetItem(echo_string))
            
            
            # check if returned value same as sent value
            if (COM_read[0]==num1) & (COM_read[1]==num2) & (COM_read[2]==num3) & (COM_read[3]==num4):

                self.tableWidget.setItem( i, 2, QTableWidgetItem('SENT & OK'))
            else:
                temp_error_count = temp_error_count+1
                temp_error_index.append(i+1)
                self.tableWidget.setItem( i, 2, QTableWidgetItem('SENT, NOT OK'))
                    
                
        # show time of complete   
        now = datetime.datetime.now()
        self.textBrowser.append(now.strftime("%Y-%m-%d %H:%M:%S"))
        self.textBrowser.append('-Parameters sent:' + str(j+1))
        
        
        if temp_error_count > 0:
            self.button_resend.setEnabled(True)
            self.textBrowser.append('-Found '+str(temp_error_count) + ' error(s), at parameters '+ str(temp_error_index) )
            self.textBrowser.append('*use "Resend" button to resend the erronous parameters'+'\n')
        
        else:
            self.button_resend.setEnabled(False)
            self.textBrowser.append('No Error')
            self.button_verify.setEnabled(True)    
        
        # update the remaining errors
        self.error_count = temp_error_count
        self.error_index = temp_error_index


        
##============================ 



       
app = QApplication(sys.argv)
widget = GUI()
widget.show()


sys.exit(app.exec_())
